const router = require("express").Router();
const controllers = require("../controllers");
const upload = require("../middleware/upload");
const imageUpload = require("../middleware/imageUpload");
const uploadFilesMiddleware = require("../middleware/uploadPdfList");
const fs = require("fs");
const path = require("path");
const UserAccount = require("../models/USER");
const fiche = require("../middleware/fiche");
const crypto = require("crypto");
const PDF = require("../models/PDF");

let counter = 0;

router.post("/upload", upload.single("file"), controllers.upload.uploadPdf);
router.post(
  "/upload/image",
  imageUpload.single("file"),
  controllers.pdfImageUpload.updateImage
);
router.post(
  "/multiupload",
  uploadFilesMiddleware,
  controllers.multiUpload.uploadPdfList
);
router.post("/info", fiche.single("file"), async (req, res) => {
  try {
    const file = req.file;
    if (file) {
      const { originalname, filename } = file;

      // Extracting the first part of the original filename
      const filenameParts = originalname.split(".");
      const filenamePrefix = filenameParts[0];

      // Generating a counter for uniqueness
      counter++;
      const counterPadded = counter.toString().padStart(2, "0"); // Add leading zeros if needed

      // Generating an encrypted date string
      const date = new Date().toISOString().slice(0, 10).replace(/-/g, "");
      const encryptedDate = crypto.randomBytes(4).toString("hex");

      // Creating the new filename
      const extension = path.extname(originalname);
      const newFilename = `${filenamePrefix}-${counterPadded}-${encryptedDate}${extension}`;

      // Update the 'fiche' field in the PDF schema
      const updatedPdf = await PDF.findOneAndUpdate(
        { _id: req.body.pdfId },
        { fiche: newFilename },
        { new: true }
      );

      if (!updatedPdf) {
        return res.status(404).json({ message: "PDF not found." });
      }

      // Move the file to the desired destination folder with the new filename
      const destinationPath = path.join("fiche", newFilename);
      fs.renameSync(file.path, destinationPath);

      console.log("File uploaded successfully");
    }
    res.status(200).json({ message: "File uploaded successfully" });
  } catch (error) {
    console.log(error);
    return res.status(500).json({ message: "Internal server error." });
  }
});
router.post(
  "/inscription",
  imageUpload.single("file"),
  controllers.userRegister.register
);

router.post("/seconnecter", controllers.userLogin.login);
router.post("/sites/creation", controllers.createSites.addSite);
router.post(
  "/public/verification/view/:code",
  controllers.verifyViewCode.verifyCode
);
router.post("/pdfs/:pdfID/raport", controllers.createPdfRaport.addRaport);

router.get("/:site/:folder/pdfs", controllers.allPdfs.allPdfs);
router.get(
  "/site/folder/pdf/details/:id",
  controllers.getPdfById.getPdfDataById
);
router.get("/sites", controllers.allSites.sites);
router.get("/pdf/raports", controllers.getRaports.getPdfReportsById);
router.get("/pdf/doe", controllers.getDOEData.getFile);
router.get("/profile/user", controllers.getUserDataById.getData);

router.get("/DOE/:username/:folder", async (req, res) => {
  const username = req.params.username;
  const folder = req.params.folder;

  const folderPath = path.join(__dirname, "DOE", username, folder);

  if (!fs.existsSync(folderPath)) {
    return res.status(404).json({ error: "Folder not found" });
  }

  try {
    const files = fs.readdirSync(folderPath);

    const fileCount = files.length;

    res.json({ fileCount });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: "Internal server error" });
  }
});

router.delete("/:site/:folder/pdfs/:title", controllers.deletePdf.delete);
router.delete("/site/:folderId", controllers.deleteSite.delete);

router.put("/site/:folderId", controllers.updateSite.updateFolder);

module.exports = router;
